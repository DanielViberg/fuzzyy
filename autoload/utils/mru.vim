vim9script noclear

var MRU_Max_Entries = 100
var MRU_Exclude_Files = ''
var MRU_Include_Files = ''

var MRU_File: string
if has('unix') || has('macunix')
    MRU_File = $HOME .. '/.vim_mru_files'
else
    MRU_File = $VIM .. '/_vim_mru_files'
    if has('win32')
        if !empty($USERPROFILE)
            MRU_File = $USERPROFILE .. '\_vim_mru_files'
        endif
    endif
endif

# Controls whether the alternate file (:help alternate-file) is set when the
# plugin is loaded to the first file in the MRU list. Default is to set the
# alternate file.
var MRU_Set_Alternate_File = 1

# Control to temporarily lock the MRU list. Used to prevent files from
# getting added to the MRU list when the ':vimgrep' command is executed.
var mru_list_locked = 0

var MRU_files = []
def MRU_LoadList()
    if filereadable(MRU_File)
        MRU_files = readfile(MRU_File)
        if empty(MRU_files)
            MRU_files = []
        elseif MRU_files[0] =~# '^\s*" Most recently edited files in Vim'
            # Generated by the previous version of the MRU plugin.
            # Discard the list.
            MRU_files = []
        elseif MRU_files[0] =~# '^#'
            # Remove the comment line
            remove(MRU_files, 0)
        else
            # Unsupported format
            MRU_files = []
        endif
    else
        MRU_files = []
    endif
enddef

def MRU_SaveList()
    var l = []
    add(l, '# Most recently edited files in Vim (version 3.0)')
    extend(l, MRU_files)
    writefile(l, MRU_File)
enddef

# MRU_AddFile
# Adds a file to the MRU file list
#   acmd_bufnr - Buffer number of the file to add
def MRU_AddFile(acmd_bufnr: string)
    if mru_list_locked
        # MRU list is currently locked
        return
    endif

    # Get the full path to the filename
    var fname = fnamemodify(bufname(str2nr(acmd_bufnr) + 0), ':p')
    if empty(fname)
        return
    endif

    # Skip temporary buffers with buftype set. The buftype is set for buffers
    # used by plugins.
    if !empty(&buftype)
        return
    endif

    if !empty(MRU_Include_Files)
        # If MRU_Include_Files is set, include only files matching the
        # specified pattern
        if fname !~# MRU_Include_Files
            return
        endif
    endif

    if !empty(MRU_Exclude_Files)
        # Do not add files matching the pattern specified in the
        # MRU_Exclude_Files to the MRU list
        if fname =~# MRU_Exclude_Files
            return
        endif
    endif

    # If the filename is not already present in the MRU list and is not
    # readable then ignore it
    var idx = index(MRU_files, fname)
    if idx == -1
        if !filereadable(fname)
            # File is not readable and is not in the MRU list
            return
        endif
    endif

    # Load the latest MRU file list
    MRU_LoadList()

    # Remove the new file name from the existing MRU list (if already present)
    filter(MRU_files, 'v:val !=# "' .. fname .. '"')

    # Add the new file list to the beginning of the updated old file list
    insert(MRU_files, fname, 0)

    # Trim the list
    if len(MRU_files) > MRU_Max_Entries
        remove(MRU_files, MRU_Max_Entries, -1)
    endif

    # Save the updated MRU list
    MRU_SaveList()
enddef

# Return the list of file names in the MRU list
export def MruGetFiles(): list<string>
  MRU_LoadList()
  return copy(MRU_files)
enddef

# Load the MRU list on plugin startup
MRU_LoadList()

# Set the first entry in the MRU list as the alternate file
# Credit to Martin Roa Villescas (https://github.com/mroavi) for the patch.
# bufadd() is available starting from Vim 8.1.1610
if MRU_Set_Alternate_File == 1
    if !empty(MRU_files)
        var first_mru_file = MRU_files[0]
        if filereadable(first_mru_file)
            bufadd(first_mru_file)
            @# = first_mru_file
        endif
    endif
endif

augroup MRUAutoCmds
    au!
    autocmd BufRead * MRU_AddFile(expand('<abuf>'))
    autocmd BufWritePost * MRU_AddFile(expand('<abuf>'))
    autocmd BufEnter * MRU_AddFile(expand('<abuf>'))

    # The ':vimgrep' command adds all the files searched to the buffer list.
    # This also modifies the MRU list, even though the user didn't edit the
    # files. Use the following autocmds to prevent this.
    autocmd QuickFixCmdPre *vimgrep* mru_list_locked = 1
    autocmd QuickFixCmdPost *vimgrep* mru_list_locked = 0
augroup END
